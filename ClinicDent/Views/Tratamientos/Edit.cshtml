@model ClinicDent.Models.Tratamientos

@{
    ViewBag.Title = "Editar Tratamiento";
    var hasOdontograma = !string.IsNullOrEmpty(Model.dientes_seleccionados) && Model.dientes_seleccionados != "{}";
}

<div class="container mt-4">
    <h2 class="mb-4 text-primary">@ViewBag.Title</h2>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="fas fa-check-circle me-2"></i>@TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="fas fa-exclamation-circle me-2"></i>@TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (!ViewData.ModelState.IsValid)
    {
        <div class="alert alert-danger">
            @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
            {
                <p>@error.ErrorMessage</p>
            }
        </div>
    }

    @using (Html.BeginForm("Edit", "Tratamientos", FormMethod.Post, new { id = "tratamientoForm", @class = "needs-validation", novalidate = true }))
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(model => model.id_tratamiento)
        @Html.HiddenFor(model => model.dientes_seleccionados, new { id = "dientesSeleccionados" })

        <div class="card mb-4 shadow-sm">
            <div class="card-header bg-primary text-white">
                <h4 class="mb-0">Detalles del Tratamiento</h4>
            </div>
            <div class="card-body">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                <div class="row g-3">
                    <div class="col-md-6">
                        <label for="id_tipo_cobro" class="form-label fw-bold">Tipo de Tratamiento</label>
                        @Html.DropDownListFor(model => model.id_tipo_cobro, (SelectList)ViewBag.id_tipo_cobro, "-- Seleccione un tipo --", new { @class = "form-select", required = true })
                        <div class="invalid-feedback">Por favor, seleccione un tipo de tratamiento.</div>
                    </div>
                    <div class="col-md-6">
                        <label for="fecha_inicio" class="form-label fw-bold">Fecha de Inicio</label>
                        @Html.TextBoxFor(model => model.fecha_inicio, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date", required = true })
                        <div class="invalid-feedback">Por favor, ingrese una fecha válida.</div>
                    </div>
                    <div class="col-md-6">
                        <label for="costo" class="form-label fw-bold">Costo</label>
                        <div class="input-group">
                            <span class="input-group-text">$</span>
                            @Html.TextBoxFor(model => model.costo, "{0:F2}", new { @class = "form-control", type = "number", step = "0.01", min = "0", required = true })
                        </div>
                        <div class="invalid-feedback">Por favor, ingrese un costo válido.</div>
                    </div>
                    <div class="col-md-6">
                        <label for="duracion_estimada" class="form-label fw-bold">Duración Estimada (días)</label>
                        @Html.TextBoxFor(model => model.duracion_estimada, new { @class = "form-control", type = "number", min = "1", required = true })
                        <div class="invalid-feedback">Por favor, ingrese una duración válida.</div>
                    </div>
                    <div class="col-12">
                        <div class="form-check">
                            @Html.CheckBoxFor(model => model.seguimiento, new { @class = "form-check-input" })
                            <label class="form-check-label fw-bold" for="seguimiento">Requiere seguimiento</label>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="card mb-4 shadow-sm">
            <div class="card-header bg-info text-white">
                <h4 class="mb-0">Odontograma</h4>
            </div>
            <div class="card-body">
                <label class="form-label fw-bold">Dientes Afectados</label>
                <div class="alert alert-info d-flex align-items-center">
                    <i class="fas fa-info-circle me-2"></i>
                    <div>
                        Seleccione los dientes afectados:<br>
                        • <strong>Clic</strong>: Marcar partes específicas<br>
                        • <strong>Doble clic</strong>: Marcar diente completo<br>
                        • <strong>Conexión</strong>: Seleccionar dos dientes para puente
                    </div>
                </div>

                @Html.Partial("_OdontogramaPartial", Model.dientes_seleccionados)
            </div>
        </div>

        <div class="d-flex justify-content-between">
            <div>
                <button type="submit" class="btn btn-primary" id="guardarTratamiento">
                    <i class="fas fa-save me-2"></i>Actualizar
                </button>
                <a href="@Url.Action("Index")" class="btn btn-secondary">
                    <i class="fas fa-arrow-left me-2"></i>Cancelar
                </a>
            </div>
            <button type="button" class="btn btn-outline-danger" data-bs-toggle="modal" data-bs-target="#deleteModal">
                <i class="fas fa-trash-alt me-2"></i>Eliminar
            </button>
        </div>
    }

    <div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title" id="deleteModalLabel">Confirmar Eliminación</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    ¿Está seguro de eliminar este tratamiento? Esta acción no se puede deshacer.
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    @using (Html.BeginForm("Delete", "Tratamientos", new { id = Model.id_tratamiento }, FormMethod.Post))
                    {
                        @Html.AntiForgeryToken()
                        <button type="submit" class="btn btn-danger">
                            <i class="fas fa-trash-alt me-2"></i>Eliminar
                        </button>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    body {
        background-color: #f8f9fa;
    }
    .container {
        max-width: 960px;
    }
    .card {
        border: none;
        border-radius: 10px;
        transition: transform 0.2s;
    }
    .card:hover {
        transform: translateY(-5px);
    }
    .card-header {
        border-radius: 10px 10px 0 0 !important;
    }
    .form-label {
        margin-bottom: 0.25rem;
    }
    .form-control, .form-select {
        border-radius: 5px;
        padding: 0.5rem 1rem;
    }
    .input-group-text {
        border-radius: 5px 0 0 5px;
        background-color: #e9ecef;
    }
    .btn {
        padding: 0.5rem 1.5rem;
        border-radius: 5px;
    }
    .btn-primary {
        background-color: #0d6efd;
        border-color: #0d6efd;
    }
    .btn-secondary {
        background-color: #6c757d;
        border-color: #6c757d;
    }
    .btn-outline-danger {
        border-color: #dc3545;
        color: #dc3545;
    }
    .btn-outline-danger:hover {
        background-color: #dc3545;
        color: white;
    }
    .alert-info {
        border-radius: 5px;
    }
    .invalid-feedback {
        font-size: 0.875rem;
    }
    @@media (max-width: 576px) {
        .container {
            padding: 0 15px;
        }
        .btn {
            width: 100%;
            margin-bottom: 0.5rem;
        }
        .d-flex {
            flex-direction: column;
        }
    }
</style>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    @Scripts.Render("~/bundles/jqueryval")
    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/js/all.min.js" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            console.log('Edit.cshtml DOM loaded');
            const form = document.getElementById('tratamientoForm');
            const guardarBtn = document.getElementById('guardarTratamiento');
            const tipoCobroSelect = document.getElementById('id_tipo_cobro');

            // Fix dropdown
            setTimeout(() => {
                if (tipoCobroSelect) {
                    console.log('Initial tipo_cobro value:', tipoCobroSelect.value);
                    if (tipoCobroSelect.value !== '@Model.id_tipo_cobro') {
                        tipoCobroSelect.value = '@Model.id_tipo_cobro';
                        console.log('Forced tipo_cobro value to:', tipoCobroSelect.value);
                    }
                }
            }, 100);

            form.addEventListener('submit', (e) => {
                if (!form.checkValidity()) {
                    e.preventDefault();
                    e.stopPropagation();
                    form.classList.add('was-validated');
                    guardarBtn.innerHTML = '<i class="fas fa-save me-2"></i>Actualizar';
                    guardarBtn.disabled = false;
                    return;
                }

                // Update hidden input first
                try {
                    const dientesInput = document.getElementById('dientesSeleccionados');
                    // Use the actual odontogram state variable your system uses
                    const odontogramState = window.odontograma?.getState() || window.estadoOdontograma || {};
                    dientesInput.value = JSON.stringify(odontogramState);
                    console.log('Odontogram state:', odontogramState);
                    console.log('Submitting form with dientes_seleccionados:', dientesInput.value);

                    // Check if any teeth are selected (excluding puentes/bridges)
                    const hasTeethSelected = odontogramState &&
                        Object.keys(odontogramState).some(key => key !== 'puentes' && Object.keys(odontogramState[key]).length > 0);

                    if (!hasTeethSelected) {
                        e.preventDefault();
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Debe seleccionar al menos un diente en el odontograma.',
                            confirmButtonColor: '#0d6efd',
                        });
                        guardarBtn.innerHTML = '<i class="fas fa-save me-2"></i>Actualizar';
                        guardarBtn.disabled = false;
                        return;
                    }

                    // Proceed with AJAX submission
                    e.preventDefault();
                    guardarBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Procesando...';
                    guardarBtn.disabled = true;

                    $.ajax({
                        url: form.action,
                        method: 'POST',
                        data: $(form).serialize(),
                        success: function (response) {
                            Swal.fire({
                                icon: 'success',
                                title: '¡Éxito!',
                                text: 'Tratamiento editado exitosamente.',
                                confirmButtonColor: '#0d6efd',
                            }).then(() => {
                                window.location.href = '@Url.Action("Index")';
                            });
                        },
                        error: function (xhr) {
                            let errorMessage = 'No se pudo actualizar el tratamiento.';
                            if (xhr.responseJSON && xhr.responseJSON.message) {
                                errorMessage = xhr.responseJSON.message;
                            }
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: errorMessage,
                                confirmButtonColor: '#0d6efd',
                            });
                            guardarBtn.innerHTML = '<i class="fas fa-save me-2"></i>Actualizar';
                            guardarBtn.disabled = false;
                        }
                    });
                } catch (e) {
                    console.error('Error updating dientesSeleccionados:', e);
                    Swal.fire({
                        icon: 'success',
                        title: '¡Éxito!',
                        text: 'Tratamiento editado exitosamente.',
                        confirmButtonColor: '#0d6efd',
                    });
                    guardarBtn.innerHTML = '<i class="fas fa-save me-2"></i>Actualizar';
                    guardarBtn.disabled = false;
                }
            });

            // Initialize tooltips
            const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]');
            [...tooltipTriggerList].forEach(el => new bootstrap.Tooltip(el));
        });
    </script>
}