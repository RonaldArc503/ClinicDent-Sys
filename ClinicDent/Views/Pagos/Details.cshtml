@model ClinicDent.Models.PagoCreateViewModel

@{
    ViewBag.Title = "Editar Pago";
}

<h2>Editar Pago</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.IdConsulta)

        <div class="form-group">
            @Html.LabelFor(model => model.IdConsulta, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.IdConsulta, Model.Consultas, "Seleccione una consulta", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.IdConsulta, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.MontoTotal, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.MontoTotal, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.MontoTotal, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.MetodoPago, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.MetodoPago, Model.MetodosPago, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.MetodoPago, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TipoPago, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.TipoPago, Model.TiposPago, new { @class = "form-control", id = "TipoPago" })
                @Html.ValidationMessageFor(model => model.TipoPago, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group" id="cuotasSection" style="@(Model.TipoPago == "Cuotas" ? "" : "display: none;")">
            @Html.LabelFor(model => model.NumeroCuotas, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.NumeroCuotas, new
                {
                    htmlAttributes = new
                    {
                        @class = "form-control",
                        id = "NumeroCuotas",
                        min = "1",
                        type = "number"
                    }
                })
                @Html.ValidationMessageFor(model => model.NumeroCuotas, "", new { @class = "text-danger" })
                <small class="text-muted">Cambie el número y presione fuera del campo para actualizar las cuotas</small>
            </div>
        </div>

        <div id="cuotasContainer" style="@(Model.TipoPago == "Cuotas" ? "" : "display: none;")">
            <h4>Detalle de Cuotas</h4>
            <div class="row">
                <div class="col-md-2"><strong>N° Cuota</strong></div>
                <div class="col-md-3"><strong>Fecha de Pago</strong></div>
                <div class="col-md-3"><strong>Monto</strong></div>
                <div class="col-md-3"><strong>Estado</strong></div>
            </div>

            <div id="cuotasList">
                @for (int i = 0; i < Model.Cuotas.Count; i++)
                {
                    <div class="form-group cuota-item">
                        <div class="col-md-2">Cuota @(i + 1)</div>
                        <div class="col-md-3">
                            @Html.TextBoxFor(model => model.Cuotas[i].FechaPago, "{0:dd/MM/yyyy}", new
                            {
                                @class = "form-control datepicker",
                                autocomplete = "off"
                            })
                            @Html.ValidationMessageFor(model => model.Cuotas[i].FechaPago, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-md-3">
                            @Html.EditorFor(model => model.Cuotas[i].Monto, new
                            {
                                htmlAttributes = new
                                {
                                    @class = "form-control monto-cuota",
                                    @readonly = "readonly"
                                }
                            })
                            @Html.ValidationMessageFor(model => model.Cuotas[i].Monto, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-md-3">
                            @{
                                var estados = new List<SelectListItem>
                                            {
                                    new SelectListItem { Value = "Pendiente", Text = "Pendiente", Selected = Model.Cuotas[i].Estado == "Pendiente" },
                                    new SelectListItem { Value = "Completado", Text = "Completado", Selected = Model.Cuotas[i].Estado == "Completado" }
                                };
                            }
                            @Html.DropDownListFor(model => model.Cuotas[i].Estado, estados, new { @class = "form-control estado-cuota" })
                            @Html.ValidationMessageFor(model => model.Cuotas[i].Estado, "", new { @class = "text-danger" })
                        </div>
                    </div>
                }
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <div class="alert alert-info">
                        <strong>Total Cuotas:</strong> <span id="totalCuotas">@Model.Cuotas.Sum(c => c.Monto).ToString("C")</span>
                        <span id="diferenciaMonto" class="@((Model.Cuotas.Sum(c => c.Monto) != Model.MontoTotal) ? "text-danger" : "text-success")">
                            (@((Model.Cuotas.Sum(c => c.Monto) - Model.MontoTotal).ToString("C")))
                        </span>
                    </div>
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Guardar Cambios" class="btn btn-primary" id="btnSubmit" />
                @Html.ActionLink("Cancelar", "Index", null, new { @class = "btn btn-default" })
            </div>
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="https://code.jquery.com/ui/1.13.2/jquery-ui.min.js"></script>
    <link rel="stylesheet" href="https://code.jquery.com/ui/1.13.2/themes/base/jquery-ui.css">

    <script>
        $(document).ready(function () {
            // Inicializar datepicker con formato de fecha válido
            $(".datepicker").datepicker({
                dateFormat: "dd/mm/yy",
                changeMonth: true,
                changeYear: true,
                onSelect: function(dateText, inst) {
                    $(this).valid(); // Forzar validación inmediata
                }
            });

            // Mostrar/ocultar sección de cuotas según tipo de pago
            $("#TipoPago").change(function () {
                var showCuotas = $(this).val() === "Cuotas";
                $("#cuotasSection").toggle(showCuotas);
                $("#cuotasContainer").toggle(showCuotas);
            });

            // Manejar cambio en número de cuotas
            $("#NumeroCuotas").change(function() {
                var numCuotas = parseInt($(this).val());
                if (numCuotas < 1) {
                    $(this).val(1);
                    numCuotas = 1;
                }

                var montoTotal = parseFloat($("#MontoTotal").val());
                var montoPorCuota = montoTotal / numCuotas;

                // Generar HTML para las cuotas
                var cuotasHtml = '';
                var today = new Date();

                for (var i = 0; i < numCuotas; i++) {
                    var fechaCuota = new Date();
                    fechaCuota.setMonth(today.getMonth() + i);

                    var dia = fechaCuota.getDate().toString().padStart(2, '0');
                    var mes = (fechaCuota.getMonth() + 1).toString().padStart(2, '0');
                    var año = fechaCuota.getFullYear();
                    var fechaFormateada = dia + '/' + mes + '/' + año;

                    cuotasHtml += `
                        <div class="form-group cuota-item">
                            <div class="col-md-2">Cuota ${i + 1}</div>
                            <div class="col-md-3">
                                <input class="form-control datepicker" autocomplete="off"
                                    data-val="true" data-val-required="El campo Fecha de Pago es obligatorio."
                                    id="Cuotas_${i}__FechaPago" name="Cuotas[${i}].FechaPago"
                                    type="text" value="${fechaFormateada}">
                                <span class="field-validation-valid text-danger" data-valmsg-for="Cuotas[${i}].FechaPago" data-valmsg-replace="true"></span>
                            </div>
                            <div class="col-md-3">
                                <input class="form-control monto-cuota" data-val="true"
                                    data-val-number="El campo Monto debe ser un número."
                                    data-val-required="El campo Monto es obligatorio."
                                    id="Cuotas_${i}__Monto" name="Cuotas[${i}].Monto"
                                    readonly="readonly" type="number" value="${montoPorCuota.toFixed(2)}">
                                <span class="field-validation-valid text-danger" data-valmsg-for="Cuotas[${i}].Monto" data-valmsg-replace="true"></span>
                            </div>
                            <div class="col-md-3">
                                <select class="form-control estado-cuota" data-val="true"
                                    data-val-required="El campo Estado es obligatorio."
                                    id="Cuotas_${i}__Estado" name="Cuotas[${i}].Estado">
                                    <option value="Pendiente">Pendiente</option>
                                    <option value="Completado">Completado</option>
                                </select>
                                <span class="field-validation-valid text-danger" data-valmsg-for="Cuotas[${i}].Estado" data-valmsg-replace="true"></span>
                            </div>
                        </div>`;
                }

                $("#cuotasList").html(cuotasHtml);

                // Re-inicializar datepickers
                $(".datepicker").datepicker({
                    dateFormat: "dd/mm/yy",
                    changeMonth: true,
                    changeYear: true,
                    onSelect: function(dateText, inst) {
                        $(this).valid();
                    }
                });

                calcularTotalCuotas();
            });

            // Validar que la suma de cuotas coincida con el monto total
            function calcularTotalCuotas() {
                var total = 0;
                $(".monto-cuota").each(function() {
                    var monto = parseFloat($(this).val()) || 0;
                    total += monto;
                });

                var montoTotal = parseFloat($("#MontoTotal").val());
                var diferencia = total - montoTotal;

                $("#totalCuotas").text(total.toLocaleString('es-CL', {style: 'currency', currency: 'CLP'}));

                var diferenciaElement = $("#diferenciaMonto");
                diferenciaElement.text("(" + diferencia.toLocaleString('es-CL', {style: 'currency', currency: 'CLP'}) + ")");

                if (Math.abs(diferencia) > 0.01) {
                    diferenciaElement.removeClass("text-success").addClass("text-danger");
                    $("#btnSubmit").prop("disabled", true);
                    diferenciaElement.after('<span class="text-danger"> La suma de cuotas no coincide con el monto total</span>');
                } else {
                    diferenciaElement.removeClass("text-danger").addClass("text-success");
                    $("#btnSubmit").prop("disabled", false);
                    $(".text-danger:contains('no coincide')").remove();
                }
            }

            // Validación antes de enviar el formulario
            $("form").submit(function(e) {
                if ($("#TipoPago").val() === "Cuotas") {
                    var totalCuotas = 0;
                    $(".monto-cuota").each(function() {
                        totalCuotas += parseFloat($(this).val()) || 0;
                    });

                    var montoTotal = parseFloat($("#MontoTotal").val());

                    if (Math.abs(totalCuotas - montoTotal) > 0.01) {
                        alert("La suma de las cuotas debe coincidir exactamente con el monto total");
                        return false;
                    }
                }

                // Validar fechas
                var fechasValidas = true;
                $(".datepicker").each(function() {
                    var fechaStr = $(this).val();
                    if (!isValidDate(fechaStr)) {
                        fechasValidas = false;
                        $(this).addClass("input-validation-error");
                        $(this).next(".field-validation-valid").text("Formato de fecha inválido (dd/mm/aaaa)");
                    }
                });

                if (!fechasValidas) {
                    alert("Por favor corrija las fechas con formato inválido");
                    return false;
                }

                return true;
            });

            // Función para validar formato de fecha
            function isValidDate(dateString) {
                var regex = /^(0?[1-9]|[12][0-9]|3[01])\/(0?[1-9]|1[0-2])\/(19|20)\d{2}$/;
                if (!regex.test(dateString)) return false;

                var parts = dateString.split("/");
                var day = parseInt(parts[0], 10);
                var month = parseInt(parts[1], 10);
                var year = parseInt(parts[2], 10);

                // Validar mes y año
                if (month < 1 || month > 12) return false;

                // Validar día
                var monthLength = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

                // Ajustar para años bisiestos
                if (year % 400 == 0 || (year % 100 != 0 && year % 4 == 0))
                    monthLength[1] = 29;

                return day > 0 && day <= monthLength[month - 1];
            }

            // Inicializar el cálculo total
            calcularTotalCuotas();
        });
    </script>
}