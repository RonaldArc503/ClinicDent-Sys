@model ClinicDent.Models.Pacientes

@{
    ViewBag.Title = "Editar Paciente";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" />
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">

<style>
    /* Contenedor principal */
    .form-container {
        max-width: 700px;
        margin: 0 0 0 10px;
        padding: 25px 25px 25px 15px;
        background-color: #e5e7e9;
        border-radius: 15px;
        box-shadow: 0 0 75px rgba(0, 0, 0, 0.1);
        border-left: 5px solid #007bff;
    }
    /* Sección de contenido */
    .section-container {
        padding: 2rem;
        margin-bottom: 1.5rem;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        border-left: 4px solid #007bff; /* Cambiado a azul */
        background-color: #fff;
    }

    /* Título */
    .edit-title {
        color: #2c3e50;
        margin-bottom: 1.5rem;
        font-size: 1.8rem;
        font-weight: 700;
        display: flex;
        align-items: center;
        padding-bottom: 1rem;
        border-bottom: 1px solid #e9ecef;
    }

    /* Grupos de formulario */
    .form-group {
        margin-bottom: 1.5rem;
    }

    /* Etiquetas */
    .control-label {
        font-weight: 600;
        color: #495057;
        margin-bottom: 0.5rem;
        display: flex;
        align-items: center;
        font-size: 0.95rem;
    }

    /* Iconos en etiquetas */
    .label-icon {
        margin-right: 0.75rem;
        color: #6c757d;
        width: 20px;
        text-align: center;
    }

    /* Campos de formulario */
    .form-control, .flatpickr-input {
        border-radius: 8px;
        padding: 0.75rem 1rem;
        border: 1px solid #e0e0e0;
        transition: all 0.3s ease;
        font-size: 0.95rem;
        box-shadow: 0 10px 40px rgba(0, 0, 0, 0.1);
    }

        .form-control:focus, .flatpickr-input:focus {
            border-color: #007bff; /* Cambiado a azul */
            box-shadow: 0 4px 8px rgba(0, 123, 255, 0.2); /* Cambiado a azul */
        }

    /* Textarea */
    textarea.form-control {
        min-height: 100px;
        resize: vertical;
    }

    /* Opciones de género */
    .gender-options {
        display: flex;
        gap: 15px;
        margin-top: 0.5rem;
    }

    .gender-option {
        display: flex;
        align-items: center;
    }

        .gender-option input {
            margin-right: 0.75rem;
        }

    /* Checkbox estado */
    .checkbox-container {
        display: flex;
        align-items: center;
        margin-top: 0.5rem;
    }

    .checkbox-label {
        margin-left: 0.75rem;
        cursor: pointer;
        font-size: 0.95rem;
    }

    /* Botón de enviar */
    .btn-submit {
        background-color: #007bff; /* Cambiado a azul */
        color: white;
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: 8px;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        margin-top: 1.5rem;
    }

        .btn-submit:hover {
            background-color: #0069d9; /* Azul más oscuro */
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }

    /* Botón de volver */
    .btn-back {
        display: inline-flex;
        align-items: center;
        color: #6c757d;
        text-decoration: none;
        transition: all 0.3s;
        font-size: 0.95rem;
        padding: 0.5rem 1rem;
        border-radius: 8px;
        background-color: #f8f9fa;
        margin-top: 1rem;
    }

        .btn-back:hover {
            color: #007bff; /* Cambiado a azul */
            background-color: #f1f1f1;
            text-decoration: none;
        }

    /* Campos requeridos */
    .field-required::after {
        content: " *";
        color: #dc3545;
    }

    /* Mensajes de error */
    .text-danger {
        font-size: 0.875em;
        margin-top: 0.25rem;
    }

    /* Input con icono */
    .input-icon {
        position: relative;
    }

        .input-icon i {
            position: absolute;
            left: 15px;
            top: 12px;
            color: #6c757d;
        }

        .input-icon input {
            padding-left: 40px;
        }

    /* Mensaje de error para edad */
    .error-message {
        color: #dc3545;
        font-size: 0.875em;
        margin-top: 0.25rem;
        display: none;
    }
</style>

<div class="edit-container">
    <div class="section-container">
        <h2 class="edit-title">
            <i class="fas fa-user-edit" style="margin-right: 12px; color: #007bff;"></i> Editar Paciente
        </h2>

        @using (Html.BeginForm(null, null, FormMethod.Post, new { id = "pacienteForm" }))
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.id_paciente)

                <!-- Sección de información básica -->
                <div class="form-group">
                    <label class="control-label required">
                        <i class="fas fa-user label-icon"></i>Nombres
                    </label>
                    <div class="input-icon">
                        @Html.EditorFor(model => model.nombres, new { htmlAttributes = new { @class = "form-control", placeholder = "Nombres del paciente", required = "required" } })
                        @Html.ValidationMessageFor(model => model.nombres, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <label class="control-label required">
                        <i class="fas fa-user label-icon"></i>Apellidos
                    </label>
                    <div class="input-icon">
                        @Html.EditorFor(model => model.apellidos, new { htmlAttributes = new { @class = "form-control", placeholder = "Apellidos del paciente", required = "required" } })
                        @Html.ValidationMessageFor(model => model.apellidos, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <label class="control-label required">
                        <i class="fas fa-calendar-alt label-icon"></i>Fecha de Nacimiento
                    </label>
                    <div class="input-icon">
                        @Html.TextBoxFor(model => model.fecha_nacimiento, "{0:yyyy-MM-dd}", new { @class = "form-control flatpickr-input", @id = "fecha_nacimiento", placeholder = "Seleccione la fecha", required = "required", autocomplete = "off" })
                        @Html.ValidationMessageFor(model => model.fecha_nacimiento, "", new { @class = "text-danger" })
                        <div id="edad-error" class="error-message">El paciente debe tener al menos 5 años de edad.</div>
                    </div>
                </div>

                <div class="form-group">
                    <label class="control-label">
                        <i class="fas fa-phone-alt label-icon"></i>Teléfono
                    </label>
                    <div class="input-icon">
                        @Html.EditorFor(model => model.telefono, new { htmlAttributes = new { @class = "form-control", placeholder = "0000-0000", id = "telefono" } })
                        @Html.ValidationMessageFor(model => model.telefono, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <label class="control-label">
                        <i class="fas fa-venus-mars label-icon"></i>Género
                    </label>
                    <div class="gender-options">
                        <label class="gender-option">
                            @Html.RadioButtonFor(model => model.genero, "Masculino") Masculino
                        </label>
                        <label class="gender-option">
                            @Html.RadioButtonFor(model => model.genero, "Femenino") Femenino
                        </label>
                    </div>
                    @Html.ValidationMessageFor(model => model.genero, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    <label class="control-label">
                        <i class="fas fa-allergies label-icon"></i>Alergias
                    </label>
                    <div>
                        @Html.TextAreaFor(model => model.alergias, new { @class = "form-control", placeholder = "Liste las alergias conocidas (separadas por comas)", rows = "3" })
                        @Html.ValidationMessageFor(model => model.alergias, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <label class="control-label">
                        <i class="fas fa-check-circle label-icon"></i>Estado
                    </label>
                    <div class="checkbox-container">
                        <div class="form-check form-switch">
                            @Html.EditorFor(model => model.activo, new { htmlAttributes = new { @class = "form-check-input", @role = "switch" } })
                            <label class="form-check-label checkbox-label">Activo</label>
                        </div>
                        @Html.ValidationMessageFor(model => model.activo, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div style="display: flex; justify-content: space-between; align-items: center; margin-top: 2rem;">
                    <a href="@Url.Action("Index")" class="btn-back">
                        <i class="fas fa-arrow-left" style="margin-right: 8px;"></i> Volver al listado
                    </a>
                    <button type="submit" class="btn-submit" id="guardarPaciente">
                        <i class="fas fa-save" style="margin-right: 8px;"></i> Guardar Cambios
                    </button>
                </div>
            </div>
        }
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <script src="https://cdn.jsdelivr.net/npm/flatpickr/dist/l10n/es.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.mask/1.14.16/jquery.mask.min.js"></script>

    <script>
        $(document).ready(function () {
            // Configuración de flatpickr para la fecha de nacimiento
            $("#fecha_nacimiento").flatpickr({
                locale: "es",
                dateFormat: "Y-m-d",
                maxDate: "today",
                allowInput: true,
                onChange: function (selectedDates, dateStr, instance) {
                    validarEdad(selectedDates[0]);
                }
            });

            // Máscara para el teléfono
            $('#telefono').mask('0000-0000', { placeholder: "____-____" });

            // Validación y formato de nombres y apellidos
            $('#nombres, #apellidos').on('input', function () {
                // Eliminar caracteres no permitidos
                this.value = this.value.replace(/[^a-zA-ZáéíóúÁÉÍÓÚñÑ\s]/g, '');

                // Convertir a minúsculas primero
                let valor = this.value.toLowerCase();

                // Capitalizar cada palabra
                this.value = valor.replace(/\b\w/g, function (l) {
                    return l.toUpperCase();
                });
            });

            // Validación del formulario
            $('#pacienteForm').on('submit', function (e) {
                // Validar edad antes de enviar
                const fechaNacimiento = $('#fecha_nacimiento').val();
                if (fechaNacimiento) {
                    const fechaParts = fechaNacimiento.split('-');
                    if (fechaParts.length === 3) {
                        const fechaNac = new Date(fechaParts[0], fechaParts[1] - 1, fechaParts[2]);
                        if (!validarEdad(fechaNac)) {
                            e.preventDefault();
                            return false;
                        }
                    }
                }

                // Asegurar que los nombres y apellidos estén capitalizados antes de enviar
                $('#nombres').val(capitalizeWords($('#nombres').val()));
                $('#apellidos').val(capitalizeWords($('#apellidos').val()));

                return true;
            });

            // Enfoque automático en el primer campo
            $('#nombres').focus();
        });

        function validarEdad(fechaNacimiento) {
            const hoy = new Date();
            const edadMinima = 5; // Edad mínima requerida

            // Calcular edad
            let edad = hoy.getFullYear() - fechaNacimiento.getFullYear();
            const mes = hoy.getMonth() - fechaNacimiento.getMonth();

            if (mes < 0 || (mes === 0 && hoy.getDate() < fechaNacimiento.getDate())) {
                edad--;
            }

            // Validar si es menor de 5 años
            if (edad < edadMinima) {
                $('#edad-error').show();
                $('#guardarPaciente').prop('disabled', true);
                return false;
            } else {
                $('#edad-error').hide();
                $('#guardarPaciente').prop('disabled', false);
                return true;
            }
        }

        // Función para capitalizar palabras
        function capitalizeWords(str) {
            if (!str) return str;
            return str.toLowerCase().replace(/\b\w/g, function (l) {
                return l.toUpperCase();
            });
        }
    </script>
}