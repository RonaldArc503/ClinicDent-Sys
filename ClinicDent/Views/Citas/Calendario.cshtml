@{
    ViewBag.Title = "Calendario de Citas";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid py-4">
    <div class="card shadow">
        <div class="card-header bg-primary text-white">
            <div class="d-flex justify-content-between align-items-center">
                <h3 class="mb-0">
                    <i class="fas fa-calendar-alt me-2"></i>@ViewBag.Title
                </h3>
                <a href="@Url.Action("Create")" class="btn btn-light">
                    <i class="fas fa-plus-circle me-1"></i> Nueva Cita
                </a>
            </div>
        </div>
        <div class="card-body">
            <div id="calendar"></div>
        </div>
    </div>
</div>

<!-- Usamos FullCalendar v5.10.1 que es estable -->
<link href="https://cdn.jsdelivr.net/npm/fullcalendar@5.10.1/main.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.10.1/main.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.10.1/locales/es.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">

<style>
    /* Estilos mejorados */
    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background-color: #f8f9fa;
    }

    #calendar {
        max-width: 1000px;
        margin: 40px auto;
        padding: 20px;
        border-radius: 30px;
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.08);
        background-color: white;
        height: 700px;
    }

    .fc-event {
        border-radius: 8px;
        padding: 3px 6px;
        font-size: 0.8rem;
        border: none;
        cursor: pointer;
        height: auto !important;
        min-height: 20px;
        white-space: normal !important;
        overflow: hidden !important;
        margin: 1px 0 !important;
        line-height: 1.2;
    }

    .fc-event-cancelada {
        background-color: #dc3545 !important;
        color: white !important;
    }

    .fc-event-pendiente {
        background-color: #ffc107 !important;
        color: #212529 !important;
    }

    .fc-event-confirmada {
        background-color: #28a745 !important;
        color: white !important;
    }

    .fc-event-completada {
        background-color: #17a2b8 !important;
        color: white !important;
    }

    .fc-button {
        border-radius: 50px !important;
        background-color: #0d6efd !important;
        padding: 8px 16px !important;
        font-size: 0.9rem !important;
        font-weight: 500 !important;
        border: none !important;
    }

        .fc-button:hover {
            background-color: #0b5ed7 !important;
        }

    .fc-toolbar-title {
        font-size: 1.4rem;
        font-weight: 600;
        color: #212529;
    }

    /* Contenedor de contenido del evento */
    .fc-event-main {
        display: flex;
        flex-direction: column;
        gap: 2px;
    }

    /* Elementos individuales */
    .fc-event-time {
        font-weight: bold;
        white-space: nowrap;
    }

    .fc-event-title {
        display: flex;
        flex-direction: column;
        gap: 2px;
    }

    .event-patient {
        font-weight: 600;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .event-dentist {
        font-style: italic;
        font-size: 0.75em;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .event-status {
        font-size: 0.7em;
        padding: 1px 4px;
        border-radius: 8px;
        display: inline-block;
        width: fit-content;
    }

    /* Ajustes para la vista de día/semana */
    .fc-timegrid-slot-label-frame {
        text-align: center;
    }

    .fc-timegrid-slot-label-cushion {
        font-size: 0.8em;
    }

    .fc-timegrid-event-harness {
        font-size: 0.85em;
    }

    /* Asegurar que las celdas de tiempo muestren AM/PM */
    .fc-timegrid-axis-cushion,
    .fc-timegrid-slot-label-cushion {
        text-transform: lowercase;
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const calendarEl = document.getElementById('calendar');

        if (!calendarEl) {
            console.error('No se encontró el elemento del calendario');
            return;
        }

        // Función para formatear la hora en 12 horas con AM/PM
        function formatTime(date) {
            if (!date) return '';

            let hours = date.getHours();
            const minutes = date.getMinutes();
            const ampm = hours >= 12 ? 'PM' : 'AM';

            hours = hours % 12;
            hours = hours ? hours : 12; // La hora '0' debe ser '12'

            const strMinutes = minutes < 10 ? '0' + minutes : minutes;
            return `${hours}:${strMinutes} ${ampm}`;
        }

        // Configuración del calendario (versión 5)
        const calendar = new FullCalendar.Calendar(calendarEl, {
            initialView: 'dayGridMonth',
            locale: 'es',
            headerToolbar: {
                left: 'prev,next today',
                center: 'title',
                right: 'dayGridMonth,timeGridWeek,timeGridDay'
            },
            buttonText: {
                today: 'Hoy',
                month: 'Mes',
                week: 'Semana',
                day: 'Día'
            },
            // Configuración para mostrar horas en formato 12h
            slotLabelFormat: {
                hour: 'numeric',
                minute: '2-digit',
                omitZeroMinute: false,
                meridiem: 'short',
                hour12: true
            },
            events: {
                url: '/Citas/ObtenerEventos',
                method: 'GET',
                failure: function (error) {
                    console.error('Error al cargar eventos:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'No se pudieron cargar las citas. Por favor, intente nuevamente.',
                        confirmButtonColor: '#0d6efd'
                    });
                }
            },
            eventTimeFormat: { // Formato de hora para los eventos
                hour: 'numeric',
                minute: '2-digit',
                meridiem: 'short',
                hour12: true
            },
            eventContent: function (arg) {
                const timeText = arg.timeText || formatTime(arg.event.start);
                const estado = arg.event.extendedProps?.estado || '';
                const paciente = arg.event.extendedProps?.paciente || arg.event.title.split(' - ')[0];
                const dentista = arg.event.extendedProps?.dentista || arg.event.title.split(' - ')[1];

                // Versión resumida para mostrar en el evento
                const pacienteShort = paciente.split(' ')[0] + (paciente.includes(' ') ? ' ' + paciente.split(' ')[1].charAt(0) + '.' : '');
                const dentistaShort = dentista.split(' ')[0];

                const eventEl = document.createElement('div');
                eventEl.className = 'fc-event-main';
                eventEl.innerHTML = `
                    <div class="fc-event-time">${timeText}</div>
                    <div class="fc-event-title">
                        <span class="event-patient">${pacienteShort}</span>
                        <span class="event-dentist">${dentistaShort}</span>
                        <span class="event-status">${estado}</span>
                    </div>
                `;

                return { domNodes: [eventEl] };
            },
            eventClick: function (info) {
                info.jsEvent.preventDefault();

                const startDate = new Date(info.event.start);
                const formattedTime = formatTime(startDate);
                const formattedDate = startDate.toLocaleDateString('es-ES', {
                    weekday: 'long',
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric'
                });

                Swal.fire({
                    title: 'Detalles de la Cita',
                    html: `
                        <div style="text-align: left;">
                            <p><strong>Paciente:</strong> ${info.event.extendedProps?.paciente || info.event.title.split(' - ')[0]}</p>
                            <p><strong>Dentista:</strong> ${info.event.extendedProps?.dentista || info.event.title.split(' - ')[1]}</p>
                            <p><strong>Fecha:</strong> ${formattedDate}</p>
                            <p><strong>Hora:</strong> ${formattedTime}</p>
                            <p><strong>Estado:</strong> ${info.event.extendedProps?.estado || ''}</p>
                        </div>
                    `,
                    icon: 'info',
                    confirmButtonColor: '#0d6efd',
                    showCancelButton: true,
                    confirmButtonText: 'Cerrar',
                    cancelButtonText: 'Editar',
                    footer: '<a href="/Citas" class="btn btn-link">Ver todas las citas</a>'
                }).then((result) => {
                    if (result.dismiss === Swal.DismissReason.cancel) {
                        window.location.href = `/Citas/Edit/${info.event.id}`;
                    }
                });
            },
            eventDidMount: function (info) {
                // Obtener el estado del evento
                let estado = info.event.extendedProps?.estado?.toLowerCase() || '';
                if (!estado && info.event.title.includes(' - ')) {
                    estado = info.event.title.split(' - ')[2]?.toLowerCase() || '';
                }

                // Aplicar clase según el estado
                if (estado) {
                    info.el.classList.add(`fc-event-${estado}`);

                    const statusEl = info.el.querySelector('.event-status');
                    if (statusEl) {
                        statusEl.classList.add(`event-status-${estado}`);
                    }
                }

                // Agregar tooltip
                const hora = formatTime(info.event.start);
                info.el.setAttribute("title",
                    `Paciente: ${info.event.extendedProps?.paciente || info.event.title.split(' - ')[0]}\n` +
                    `Dentista: ${info.event.extendedProps?.dentista || info.event.title.split(' - ')[1]}\n` +
                    `Hora: ${hora}\n` +
                    `Estado: ${estado}`);
            }
        });

        calendar.render();

        // Verificación de carga
        setTimeout(() => {
            const events = calendar.getEvents();
            console.log('Eventos cargados:', events.length);

            if (events.length === 0) {
                console.warn('No se cargaron eventos. Verifica:');
                console.warn('1. La respuesta de /Citas/ObtenerEventos');
                console.warn('2. Que existan citas en la base de datos');
            }
        }, 2000);
    });
</script>